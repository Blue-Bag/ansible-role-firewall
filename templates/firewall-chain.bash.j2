#!/bin/bash
# iptables firewall for common LAMP servers.
#
# Adapted from Jeff Geerling's firewall
# to allow for chains and whitelists
#
# This file should be located at /etc/firewall.bash, and is meant to work with
# Jeff Geerling's firewall init script.
#
# Common port reference:
#   22: SSH
#   25: SMTP
#   80: HTTP
#   123: NTP
#   443: HTTPS
#   2222: SSH alternate
#   4949: Munin
#   6082: Varnish admin
#   8080: HTTP alternate (often used with Tomcat)
#   8983: Tomcat HTTP
#   8443: Tomcat HTTPS
#   9000: SonarQube
#
# @author George Boobyer (based on Jeff Geerling)

# No spoofing.
if [ -e /proc/sys/net/ipv4/conf/all/rp_filter ]
then
for filter in /proc/sys/net/ipv4/conf/*/rp_filter
do
echo 1 > $filter
done
fi

{% if firewall_flush_rules_and_chains %}
# Completely reset the firewall by removing all rules and chains.
iptables -P INPUT {{ filewall_input_default }}
iptables -P FORWARD {{ filewall_forward_default }}
iptables -P OUTPUT {{ filewall_output_default }}
iptables -t nat -F
iptables -t mangle -F
iptables -F
iptables -X
{% endif %}

# Accept traffic from loopback interface (localhost).
iptables -A INPUT -i lo -j ACCEPT

# Continue connections that are already established or related to an established
# connection.
iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# see https://unix.stackexchange.com/questions/108169/what-is-the-difference-between-m-conntrack-ctstate-and-m-state-state
# for discussion on state vs conntrack
# Allow established connections:
# iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

###############################################################################
# 1. Whitelists and IPSETs                                                    #
#                                                                             #
# Set up whitellists and block lists before we do any accepting and blocking  #
###############################################################################

{% if firewall_ipset %}
{% include 'firewall-ipset.j2' %}
{% else %}
{% if firewall_whitelist is defined %}
# create a whiter than white list chain
iptables -N IP_WTWhitelist
#Create whitelist
{% for wl in firewall_whitelist %}
iptables -I IP_WTWhitelist -s {{ wl.ip }} -j ACCEPT
{% endfor %}
iptables -I INPUT -p tcp -m tcp  -m state --state NEW -j IP_WTWhitelist
{% endif %}
{% endif %}
###############################################################################
# 2. General Rules                                                            #
#                                                                             #
# This section is a generic header that should be suitable for most hosts.    #
###############################################################################


# Drop all packets that are going to broadcast, multicast or anycast address.
iptables -A INPUT -m addrtype --dst-type BROADCAST -j DROP
iptables -A INPUT -m addrtype --dst-type MULTICAST -j DROP
iptables -A INPUT -m addrtype --dst-type ANYCAST -j DROP
iptables -A INPUT -d 224.0.0.0/4 -j DROP

# Forwarded ports.
{# Add a rule for each forwarded port #}
{% for forwarded_port in firewall_forwarded_tcp_ports %}
iptables -t nat -I PREROUTING -p tcp --dport {{ forwarded_port.src }} -j REDIRECT --to-port {{ forwarded_port.dest }}
iptables -t nat -I OUTPUT -p tcp -o lo --dport {{ forwarded_port.src }} -j REDIRECT --to-port {{ forwarded_port.dest }}
{% endfor %}
{% for forwarded_port in firewall_forwarded_udp_ports %}
iptables -t nat -I PREROUTING -p udp --dport {{ forwarded_port.src }} -j REDIRECT --to-port {{ forwarded_port.dest }}
iptables -t nat -I OUTPUT -p udp -o lo --dport {{ forwarded_port.src }} -j REDIRECT --to-port {{ forwarded_port.dest }}
{% endfor %}

###############################################################################
# 3. Chains                                                                   #
#                                                                             #
# This section sets up protected port chains.                                 #
###############################################################################
# Create Chains.
{% for chain in firewall_protected_chains %}
iptables -N {{ chain.name }}
{% endfor %}

iptables -N IP_Whitelist
iptables -N IP_Blacklist
iptables -N IP_BlacklistLOG

{# Add a rule for each chain #}
{% for chain in firewall_protected_chains %}
iptables -A INPUT -p tcp -m tcp --dport {{ chain.port }} -m state --state {{ chain.state | default('NEW')}} -j {{ chain.name }}
{% endfor %}

# Fill Chains.
{# Add a rule for each chain #}
{% for chain in firewall_protected_chains %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -m recent --set --name {{ chain.name }} --rsource
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -j IP_Whitelist
{% if chain.default == 'ACCEPT'  %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -j IP_Blacklist
{% else %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -m recent --update --rttl --name {{ chain.name }} --rsource -j LOG --log-prefix "iptables[{{ chain.name }} Attempt]: " --log-level {{ firewall_log_level }}
{% if firewall_ipset and firewall_reban_hosts %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -m recent --update --rttl --name {{ chain.name }} --rsource -j IP_Add2bannedhosts
{% endif %}
{% endif %}
{% if chain.ratelimit is defined %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -m recent --update --seconds {{ chain.hit_ttl|default(60) }} --hitcount {{ chain.hitcount|default(4) }} --rttl --name {{ chain.name }} --rsource -j LOG --log-prefix "iptables[Anti {{ chain.name }}-Bruteforce]: " --log-level {{ firewall_log_level }}
{% if firewall_ipset and firewall_reban_hosts %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -m recent --update --seconds {{ chain.hit_ttl|default(60) }} --hitcount {{ chain.hitcount|default(4) }} --rttl --name {{ chain.name }} --rsource -j IP_Add2bannedhosts
{% endif %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -m recent --update --seconds {{ chain.hit_ttl|default(60) }} --hitcount {{ chain.hitcount|default(4) }} --rttl --name {{ chain.name }} --rsource -j DROP
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -j {{ chain.default }}
{% else %}
{% if chain.ddos is defined and chain.ddos == true %}
#iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state RELATED,ESTABLISHED -m limit --limit {{ chain.ddos_rate }} --limit-burst {{ chain.ddos_burst }} -j ACCEPT
#iptables -A INPUT -j LOG -p tcp --dport 80 -m state --state NEW --log-prefix 'TCP {{ chain.port }} Burst Exhausted'

iptables -A {{ chain.name }} -p tcp --dport {{ chain.port }} -m state --state NEW -m limit --limit {{ chain.ddos_rate }} --limit-burst {{ chain.ddos_burst }} -j ACCEPT
# not going to get here as chain is already NEW
iptables -A {{ chain.name }} -m state --state RELATED,ESTABLISHED -m limit --limit {{ chain.ddos_rate }} --limit-burst {{ chain.ddos_burst }} -j ACCEPT
# log blocked packets
iptables -A {{ chain.name }} -j LOG -p tcp --dport 80 -m state --state NEW --log-prefix 'iptables[TCP {{ chain.port }} Burst Exhausted]: ' --log-level {{ firewall_log_level }}
# block packets
iptables -A {{ chain.name }} -j REJECT
{% else %}
iptables -A {{ chain.name }} -p tcp -m tcp --dport {{ chain.port }} -m state --state NEW -j {{ chain.default }}
{% endif %}
{% endif %}
{% endfor %}

#Create whitelist
{% for wl in firewall_whitelist %}
# {{ wl.name }}
iptables -A IP_Whitelist -s {{ wl.ip }} -j ACCEPT
{% endfor %}

{% for val in firewall_allowed_ips %}
# allowed
iptables -A IP_Whitelist -s {{ val }} -j ACCEPT
{% endfor %}

#Create Blacklist
{% for bl in firewall_blacklist %}
# {{ bl.name }}
iptables -A IP_Blacklist -s {{ bl.ip }} -p tcp -m tcp -m state --state NEW -j IP_BlacklistLOG
{% endfor %}

#Create Blacklist log
iptables -A IP_BlacklistLOG -p tcp -m tcp  -m state --state NEW -m recent --update --rttl  --rsource -j LOG  --log-prefix "iptables[BL Attempt]: " --log-level {{ firewall_log_level }}
iptables -A IP_BlacklistLOG -p tcp -m tcp  -m state --state NEW -j DROP


###############################################################################
# 4. Security                                                                 #
#                                                                             #
# This section sets up specific security                                      #
###############################################################################


{% for port in firewall_allowed_udp_ports %}
iptables -A INPUT -p udp -m udp --dport {{ port }} -j ACCEPT
{% endfor %}

{% if firewall_extra_security %}
{% include 'firewall-icmp.bash.j2' %}
{% include 'block-misc.bash.j2' %}

  {% if firewall_block_portscan %}
{% include 'block-portscan.bash.j2' %}
  {% endif %}

  {% if firewall_block_spoofed %}
{% include 'block-spoofed.bash.j2' %}
  {% endif %}

  {% if firewall_block_smurf %}
{% include 'block-smurf.bash.j2' %}
  {% endif %}
{% endif %}

# Allow NTP traffic for time synchronization.
iptables -A OUTPUT -p udp --dport 123 -j ACCEPT
iptables -A INPUT -p udp --sport 123 -j ACCEPT

# Additional custom rules.
{% for rule in firewall_additional_rules %}
{{ rule }}
{% endfor %}


###############################################################################
# 5. Logging                                                                  #
#                                                                             #
# This section sets up logging                                                #
###############################################################################

# Log EVERYTHING (ONLY for Debug).
# iptables -A INPUT -j LOG
{% if firewall_log_dropped_packets %}
# Log other incoming requests (all of which are dropped) at 15/minute max.
# Prevent DOS by filling log files.
iptables -A INPUT -m limit --limit 1/second --limit-burst 100 -j LOG --log-prefix "iptables[DOS]: " --log-level {{ firewall_log_level }}

# Log other incoming requests (all of which are dropped) at 15/minute max.
iptables -A INPUT -m limit --limit 15/minute -j LOG --log-prefix "iptables[In Dropped]: " --log-level {{ firewall_log_level }}
{% endif %}


# Drop all other traffic.
iptables -A INPUT -j DROP

{% if firewall_enable_ipv6 %}
{% include 'firewall-ipv6.bash.j2' %}
{% endif %}
